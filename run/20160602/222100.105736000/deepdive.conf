
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        has_spouse.label: Boolean
      }
    

      deepdive.extraction.extractors.ext_has_spouse {
        cmd: """

	# TODO use temporary table
	deepdive create table "has_spouse"
	deepdive sql 'INSERT INTO has_spouse SELECT DISTINCT R0.column_0, R0.column_1, 0 AS id, 
CASE WHEN R0.column_2 > 0 THEN true
     WHEN R0.column_2 < 0 THEN false
     ELSE NULL
END AS label
          FROM spouse_label_resolved R0
        
          
UNION ALL
SELECT R0.mention_id AS "person_mention.R0.mention_id", R1.team_id AS "team_mention.R1.team_id"
FROM person_mention R0, team_mention R1, spouses_dbpedia_negative R2
        WHERE R2.p_name = R0.mention_text  AND R2.t_name = R1.team_text '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "has_spouse"
        style: "cmd_extractor"
          dependencies: [ "ext_spouse_label_resolved" ,  "ext_person_mention_by_map_person_mention" ,  "ext_team_mention_by_map_team_mention" ]
          input_relations: [
            spouse_label_resolved
            person_mention
            team_mention
            spouses_dbpedia_negative
          ]
      }
    

      deepdive.extraction.extractors.ext_spouse_candidate {
        cmd: """

	# TODO use temporary table
	deepdive create table "spouse_candidate"
	deepdive sql 'INSERT INTO spouse_candidate SELECT R1.mention_id AS "person_mention.R1.mention_id", R1.mention_text AS "person_mention.R1.mention_text", R2.team_id AS "team_mention.R2.team_id", R2.team_text AS "team_mention.R2.team_text"
FROM num_people R0, person_mention R1, team_mention R2
        WHERE R1.doc_id = R0.column_0  AND R1.sentence_index = R0.column_1  AND R2.doc_id = R0.column_0  AND R2.sentence_index = R0.column_1  AND R0.column_2 < 3'
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "spouse_candidate"
        style: "cmd_extractor"
          dependencies: [ "ext_num_people" ,  "ext_person_mention_by_map_person_mention" ,  "ext_team_mention_by_map_team_mention" ]
          input_relations: [
            num_people
            person_mention
            team_mention
          ]
      }
    

      deepdive.extraction.extractors.ext_num_people {
        cmd: """

	deepdive create view num_people as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.mention_id) AS column_2
FROM person_mention R0
        
        GROUP BY R0.doc_id, R0.sentence_index'
	
        """
          output_relation: "num_people"
        style: "cmd_extractor"
          dependencies: [ "ext_person_mention_by_map_person_mention" ]
          input_relations: [
            person_mention
          ]
      }
    

      deepdive.extraction.extractors.ext_spouse_label_resolved {
        cmd: """

	deepdive create view spouse_label_resolved as 'SELECT R0.p_id AS column_0, R0.t_id AS column_1, SUM(R0.label) AS column_2
FROM spouse_label R0
        
        GROUP BY R0.p_id, R0.t_id'
	
        """
          output_relation: "spouse_label_resolved"
        style: "cmd_extractor"
          dependencies: [ "ext_spouse_label" ]
          input_relations: [
            spouse_label
          ]
      }
    

      deepdive.extraction.extractors.ext_num_team {
        cmd: """

	deepdive create view num_team as 'SELECT R0.doc_id AS column_0, R0.sentence_index AS column_1, COUNT(R0.team_id) AS column_2
FROM team_mention R0
        
        GROUP BY R0.doc_id, R0.sentence_index'
	
        """
          output_relation: "num_team"
        style: "cmd_extractor"
          dependencies: [ "ext_team_mention_by_map_team_mention" ]
          input_relations: [
            team_mention
          ]
      }
    

      deepdive.extraction.extractors.ext_spouse_label {
        cmd: """

	# TODO use temporary table
	deepdive create table "spouse_label"
	deepdive sql 'INSERT INTO spouse_label SELECT R0.p_id AS "spouse_candidate.R0.p_id", R0.t_id AS "spouse_candidate.R0.t_id", 0 AS column_2, NULL AS column_3
FROM spouse_candidate R0
        
UNION ALL
SELECT R0.p_id AS "spouse_candidate.R0.p_id", R0.t_id AS "spouse_candidate.R0.t_id", 1 AS column_2, '\''from_dbpedia'\'' AS column_3
FROM spouse_candidate R0, spouses_dbpedia R1
        WHERE ((lower(R1.p_name) = lower(R0.p_name) AND lower(R1.t_name) = lower(R0.p_name)) OR (lower(R1.t_name) = lower(R0.t_name) AND lower(R1.p_name) = lower(R0.t_name)))
UNION ALL
SELECT R0.p_id AS "spouse_label__0.R0.p_id", R0.t_id AS "spouse_label__0.R0.t_id", R0.label AS "spouse_label__0.R0.label", R0.rule_id AS "spouse_label__0.R0.rule_id"
FROM spouse_label__0 R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "spouse_label"
        style: "cmd_extractor"
          dependencies: [ "ext_spouse_candidate" ,  "ext_spouse_label__0_by_supervise" ]
          input_relations: [
            spouse_candidate
            spouses_dbpedia
            spouse_label__0
          ]
      }
    

        deepdive.extraction.extractors.ext_sentences_by_nlp_markup {
          input: """ SELECT R0.id AS "articles.R0.id", R0.content AS "articles.R0.content"
FROM articles R0
        
          """
          output_relation: "sentences"
          udf: ${APP_HOME}"/udf/nlp_markup.sh"
          style: "tsv_extractor" 
          
          input_relations: [
            articles
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_person_mention_by_map_person_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.tokens AS "sentences.R0.tokens", R0.ner_tags AS "sentences.R0.ner_tags"
FROM sentences R0
        
          """
          output_relation: "person_mention"
          udf: ${APP_HOME}"/udf/map_person_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_nlp_markup" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_team_mention_by_map_team_mention {
          input: """ SELECT R0.doc_id AS "sentences.R0.doc_id", R0.sentence_index AS "sentences.R0.sentence_index", R0.tokens AS "sentences.R0.tokens", R0.ner_tags AS "sentences.R0.ner_tags"
FROM sentences R0
        
          """
          output_relation: "team_mention"
          udf: ${APP_HOME}"/udf/map_team_mention.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_sentences_by_nlp_markup" ]
          input_relations: [
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_spouse_feature_by_extract_spouse_features {
          input: """ SELECT R0.mention_id AS "person_mention.R0.mention_id", R1.team_id AS "team_mention.R1.team_id", R0.begin_index AS "person_mention.R0.begin_index", R0.end_index AS "person_mention.R0.end_index", R1.begin_index AS "team_mention.R1.begin_index", R1.end_index AS "team_mention.R1.end_index", R0.doc_id AS "person_mention.R0.doc_id", R0.sentence_index AS "person_mention.R0.sentence_index", R2.tokens AS "sentences.R2.tokens", R2.lemmas AS "sentences.R2.lemmas", R2.pos_tags AS "sentences.R2.pos_tags", R2.ner_tags AS "sentences.R2.ner_tags", R2.dep_types AS "sentences.R2.dep_types", R2.dep_tokens AS "sentences.R2.dep_tokens"
FROM person_mention R0, team_mention R1, sentences R2
        WHERE R1.doc_id = R0.doc_id  AND R1.sentence_index = R0.sentence_index  AND R2.doc_id = R0.doc_id  AND R2.sentence_index = R0.sentence_index 
          """
          output_relation: "spouse_feature"
          udf: ${APP_HOME}"/udf/extract_spouse_features.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_person_mention_by_map_person_mention" ,  "ext_team_mention_by_map_team_mention" ,  "ext_sentences_by_nlp_markup" ]
          input_relations: [
            person_mention
            team_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.ext_spouse_label__0_by_supervise {
          input: """ SELECT R0.p_id AS "spouse_candidate.R0.p_id", R1.begin_index AS "person_mention.R1.begin_index", R1.end_index AS "person_mention.R1.end_index", R0.t_id AS "spouse_candidate.R0.t_id", R2.begin_index AS "team_mention.R2.begin_index", R2.end_index AS "team_mention.R2.end_index", R1.doc_id AS "person_mention.R1.doc_id", R1.sentence_index AS "person_mention.R1.sentence_index", R3.sentence_text AS "sentences.R3.sentence_text", R3.tokens AS "sentences.R3.tokens", R3.lemmas AS "sentences.R3.lemmas", R3.pos_tags AS "sentences.R3.pos_tags", R3.ner_tags AS "sentences.R3.ner_tags", R3.dep_types AS "sentences.R3.dep_types", R3.dep_tokens AS "sentences.R3.dep_tokens"
FROM spouse_candidate R0, person_mention R1, team_mention R2, sentences R3
        WHERE R1.mention_id = R0.p_id  AND R2.team_id = R0.t_id  AND R3.doc_id = R1.doc_id  AND R3.sentence_index = R1.sentence_index 
          """
          output_relation: "spouse_label__0"
          udf: ${APP_HOME}"/udf/supervise_spouse.py"
          style: "tsv_extractor" 
          dependencies: [ "ext_spouse_candidate" ,  "ext_person_mention_by_map_person_mention" ,  "ext_team_mention_by_map_team_mention" ,  "ext_sentences_by_nlp_markup" ]
          input_relations: [
            spouse_candidate
            person_mention
            team_mention
            sentences
          ]
          input_batch_size: ${INPUT_BATCH_SIZE}
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inf_istrue_has_spouse {
          input_query: """
          SELECT R0.id AS "has_spouse.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM has_spouse R0, spouse_candidate R1, spouse_feature R2
        WHERE R1.p_id = R0.p_id  AND R1.t_id = R0.t_id  AND R2.p_id = R0.p_id  AND R2.t_id = R0.t_id """
          function: "Imply(has_spouse.R0.label)"
          weight: "?(dd_weight_column_0)"
          dependencies: [ "ext_spouse_candidate" ,  "ext_spouse_feature_by_extract_spouse_features" ]
          input_relations: [
            has_spouse
            spouse_candidate
            spouse_feature
          ]
        }
      

        deepdive.inference.factors.inf1_istrue_has_spouse {
          input_query: """
          SELECT R0.id AS "has_spouse.R0.id" 
          FROM has_spouse R0, person_mention R1, team_mention R2, spouses_dbpedia R3
        WHERE R1.mention_id = R0.p_id  AND R2.team_id = R0.t_id  AND R3.p_name = R1.mention_text  AND R3.t_name = R2.team_text """
          function: "Imply(has_spouse.R0.label)"
          weight: "3.0"
          dependencies: [ "ext_person_mention_by_map_person_mention" ,  "ext_team_mention_by_map_team_mention" ]
          input_relations: [
            has_spouse
            person_mention
            team_mention
            spouses_dbpedia
          ]
        }
      

        deepdive.inference.factors.inf_imply_has_spouse_has_spouse {
          input_query: """
          SELECT R0.id AS "has_spouse.R0.id" , R0.id AS "has_spouse.R0.id" 
          FROM has_spouse R0, has_spouse R1, spouse_candidate R2, spouse_candidate R3, spouse_candidate R4
        WHERE R1.p_id = R0.p_id  AND R1.t_id = R0.t_id  AND R2.p_id = R0.p_id  AND R2.t_id = R0.t_id  AND R3.t_id = R0.t_id  AND R4.p_id = R0.p_id """
          function: "Imply(has_spouse.R0.label, has_spouse.R0.label)"
          weight: "-1.0"
          dependencies: [ "ext_spouse_candidate" ]
          input_relations: [
            has_spouse
            spouse_candidate
          ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_num_people
  ext_has_spouse
  ext_spouse_label_resolved
  ext_person_mention_by_map_person_mention
  ext_spouse_feature_by_extract_spouse_features
  ext_num_team
  ext_team_mention_by_map_team_mention
  ext_sentences_by_nlp_markup
  ext_spouse_label
  ext_spouse_label__0_by_supervise
  ext_spouse_candidate
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_has_spouse
  inf1_istrue_has_spouse
  inf_imply_has_spouse_has_spouse
]
deepdive.pipeline.pipelines.endtoend: [
  ext_num_people
  ext_has_spouse
  ext_spouse_label_resolved
  ext_person_mention_by_map_person_mention
  ext_spouse_feature_by_extract_spouse_features
  ext_num_team
  ext_team_mention_by_map_team_mention
  ext_sentences_by_nlp_markup
  ext_spouse_label
  ext_spouse_label__0_by_supervise
  ext_spouse_candidate
  inf_istrue_has_spouse
  inf1_istrue_has_spouse
  inf_imply_has_spouse_has_spouse
]
deepdive.calibration.holdout_fraction:0.25
deepdive.sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.01 --sample_evidence"
deepdive.schema {"relations" : {"sentences" : {"columns" : {"doc_offsets" : {"type" : "int[]", "index" : 7}, "sentence_index" : {"type" : "int", "index" : 1, "annotations" : [{"name" : "key"}]}, "sentence_text" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "searchable"}]}, "doc_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "ner_tags" : {"type" : "text[]", "index" : 6}, "lemmas" : {"type" : "text[]", "index" : 4}, "dep_types" : {"type" : "text[]", "index" : 8}, "tokens" : {"type" : "text[]", "index" : 3}, "pos_tags" : {"type" : "text[]", "index" : 5}, "dep_tokens" : {"type" : "int[]", "index" : 9}}, "annotations" : [{"name" : "source"}]}, "spouses_dbpedia" : {"columns" : {"p_name" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}, "t_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "source"}]}, "has_spouse" : {"columns" : {"p_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "person_mention", "column" : "mention_id", "alias" : "p"}}]}, "t_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "team_mention", "column" : "team_id", "alias" : "t"}}]}}, "annotations" : [{"name" : "extraction"}], "variable_type" : "boolean", "variable_cardinality" : 2}, "spouse_label__0" : {"columns" : {"p_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "p_id", "alias" : "has_spouse"}}]}, "t_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "t_id", "alias" : "has_spouse"}}]}, "label" : {"type" : "int", "index" : 2, "annotations" : [{"name" : "navigable"}]}, "rule_id" : {"type" : "text", "index" : 3, "annotations" : [{"name" : "navigable"}]}}, "annotations" : [{"name" : "extraction"}]}, "articles" : {"columns" : {"id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "distributed_by"}]}, "content" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}}, "annotations" : [{"name" : "source"}]}, "spouse_feature" : {"columns" : {"p_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "p_id", "alias" : "has_spouse"}}]}, "t_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "t_id", "alias" : "has_spouse"}}]}, "feature" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "extraction"}]}, "spouses_dbpedia_negative" : {"columns" : {"p_name" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}, "t_name" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "source"}]}, "spouse_candidate" : {"columns" : {"p_id" : {"type" : "text", "index" : 0}, "p_name" : {"type" : "text", "index" : 1}, "t_id" : {"type" : "text", "index" : 2}, "t_name" : {"type" : "text", "index" : 3}}}, "person_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3, "annotations" : [{"name" : "references", "args" : {"relation" : "sentences", "column" : "sentence_index", "alias" : "appears_in"}}]}, "doc_id" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "distributed_by"}, {"name" : "references", "args" : {"relation" : "sentences", "column" : "doc_id", "alias" : "appears_in"}}]}, "mention_text" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "end_index" : {"type" : "int", "index" : 5}, "mention_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}}, "annotations" : [{"name" : "extraction"}]}, "num_people" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "spouse_label_resolved" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "num_team" : {"type" : "view", "columns" : {"column_0" : {"type" : "UNKNOWN", "index" : 0}, "column_1" : {"type" : "UNKNOWN", "index" : 1}, "column_2" : {"type" : "UNKNOWN", "index" : 2}}}, "team_mention" : {"columns" : {"begin_index" : {"type" : "int", "index" : 4}, "sentence_index" : {"type" : "int", "index" : 3, "annotations" : [{"name" : "references", "args" : {"relation" : "sentences", "column" : "sentence_index", "alias" : "appears_in"}}]}, "team_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}]}, "team_text" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "searchable"}]}, "doc_id" : {"type" : "text", "index" : 2, "annotations" : [{"name" : "distributed_by"}, {"name" : "references", "args" : {"relation" : "sentences", "column" : "doc_id", "alias" : "appears_in"}}]}, "end_index" : {"type" : "int", "index" : 5}}, "annotations" : [{"name" : "extraction"}]}, "spouse_label" : {"columns" : {"p_id" : {"type" : "text", "index" : 0, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "p_id", "alias" : "has_spouse"}}]}, "t_id" : {"type" : "text", "index" : 1, "annotations" : [{"name" : "key"}, {"name" : "references", "args" : {"relation" : "has_spouse", "column" : "t_id", "alias" : "has_spouse"}}]}, "label" : {"type" : "int", "index" : 2, "annotations" : [{"name" : "navigable"}]}, "rule_id" : {"type" : "text", "index" : 3, "annotations" : [{"name" : "navigable"}]}}, "annotations" : [{"name" : "extraction"}]}}}
